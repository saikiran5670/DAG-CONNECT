syntax = "proto3";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "net.atos.daf.ct2.accountservice";

package net.atos.daf.ct2.accountservice;

// The greeting service definition.
service AccountService {
  // Account Methods 
  rpc Create (AccountRequest) returns (AccountData);
  rpc Update (AccountRequest) returns (AccountData);
  rpc Delete (AccountRequest) returns (AccountResponse);
  rpc ChangePassword (AccountRequest) returns (AccountResponse);
  rpc Get (AccountFilter) returns (AccountDataList);
  rpc GetAccountDetail (AccountGroupDetailsRequest) returns (AccountDetailsResponse); 

  // Account Preference Mthod
  rpc CreatePreference (AccountPreference) returns (AccountPreferenceResponse);
  rpc UpdatePreference (AccountPreference) returns (AccountPreferenceResponse);
  rpc DeletePreference (IdRequest) returns (AccountPreferenceResponse);
  rpc GetPreference (AccountPreferenceFilter) returns (AccountPreferenceDataList);

  // Access Relationship
  rpc CreateAccessRelationship (AccessRelationship) returns (AccessRelationshipResponse);
  rpc UpdateAccessRelationship (AccessRelationship) returns (AccessRelationshipResponse);
  rpc DeleteAccessRelationship (AccessRelationshipDeleteRequest) returns (AccessRelationshipResponse);
  rpc GetAccessRelationship (AccessRelationshipFilter) returns (AccessRelationshipDataList);

  // Account Group Method
  rpc CreateGroup (AccountGroupRequest) returns (AccountGroupResponce);
  rpc UpdateGroup (AccountGroupRequest) returns (AccountGroupResponce);
  rpc RemoveGroup (IdRequest) returns (AccountGroupResponce);
  rpc GetAccountGroup (AccountGroupFilterRequest) returns (AccountGroupDataList);
  rpc GetAccountGroupDetail (AccountGroupDetailsRequest) returns (AccountGroupDetailsDataList);
  rpc AddAccountToGroups(AccountGroupRefRequest) returns (AccountGroupRefResponce);
  rpc DeleteAccountFromGroups(IdRequest) returns (AccountGroupResponce);
  

  // Add Role
   rpc AddRoles (AccountRoleRequest) returns (AccountRoleResponse);
  rpc RemoveRoles (AccountRoleDeleteRequest) returns (AccountRoleResponse);
  rpc GetRoles (AccountRoleDeleteRequest) returns (AccountRoles);
}
enum AccountType
    {
        None = 0;
        SystemAccount = 1;
        PortalAccount = 2;        
    }
    // response code  
    enum Responcecode{
      Success = 0;
      Failed = 1;
      Conflict = 2;
    }
// common response 
message AccountResponse {
  Responcecode Code=1;
  string Message = 2;  
}
// common response 
message AccountData {
  Responcecode Code=1;
  string Message = 2;
  AccountRequest Account = 3;
}
message KeyValue
{
  int32 Id=1;
  string Name=2;
}
// account details 
message AccountDetails {  
  AccountRequest Account = 1;
  repeated KeyValue Roles = 2;
  repeated KeyValue AccountGroups = 3;  
}
message AccountDetailsResponse {  
  repeated AccountDetails AccountDetails = 1;
  Responcecode Code=2;
  string Message = 3;
}

// common response 
message AccountDataList {
  Responcecode Code=1;
  string Message = 2;
  repeated AccountRequest Accounts = 3;
}

// The request request.
message AccountRequest {
    int32 Id= 1;
    string EmailId=2;
    string Salutation=3;
    string FirstName=4;
    string LastName=5;
    string Password=6;    
    int32 OrganizationId=7;    
  }

message AccountId
{
  int32 Id=1;
}
// // The account filter
message AccountFilter {
  int32 Id= 1;
  int32 OrganizationId= 2;
  string Name=3;
  string Email=4;  
  string AccountIds = 5;
  int32 AccountGroupId=6;

}

// // Account Preference
// enum CurrencyType
//     {
//         //None = 'N',
//         Euro = 0;
//         Usdollar = 1;
//         PondSterling = 2;
//     }
//     enum DateFormatDisplayType
//     {
//          //None = 'N',
//         DayMonthYear= 0;
//         MonthDayYear= 1;
//         YearMonthDay= 2;
//     }
//     enum PreferenceType
//     {
//         //None = 'N',
//         Account = 0;
//         Organization = 1;
//     }
//     enum UnitType
//     {
//         // None = 'N',
//         Metric= 0;
//         Imperial= 1;
//         Usimperial = 2;
//     }
//     enum VehicleDisplayType    
//     {
//         //None = 'N',
//         RegistrationNumber= 0;
//         Name= 1;
//         Vin = 2;   
//     }

    message AccountPreference
    {
        int32 Id =1;
        int32 Ref_Id =2;
        //PreferenceType preferenceType =3;
        int32 LanguageId =3;
        int32 TimezoneId =4;
        int32 CurrencyId =5;
        int32 UnitId = 6;
        int32 VehicleDisplayId =7;
        int32 DateFormatId =8;
        string DriverId =9;
        int32 TimeFormatId=10;
        int32 LandingPageDisplayId=11;        
    }
    message AccountPreferenceResponse
    {
      Responcecode Code=1;
      string Message = 2;
      AccountPreference AccountPreference= 3;      
    }
    message AccountPreferenceDataList
    {
      Responcecode Code=1;
      string Message = 2;
      repeated AccountPreference Preference= 3;      
    }    
    message AccountPreferenceFilter
    {
        int32 Id =1;
        int32 Ref_Id =2;
        //PreferenceType preference =3;
    }
// End - Account Preference 

// Begin Account Group
enum ObjectType{
  VehicleGroup = 0;
  AccountGroup = 1;
}

enum GroupType{
  Single = 0;
  Group = 1;
  Dynamic = 2;
}

enum FunctionEnum{
  All = 0;
}

message AccountGroupRefResponce{
  Responcecode code=1;
  string message = 2;    
}

message AccountGroupRef{
  
  int32 Group_Id = 1;
  int32 Ref_Id = 2;
}
message AccountGroupRefRequest{
  repeated AccountGroupRef GroupRef = 1;
}
message AccountGroupRequest{
  int32 Id=1;
  string Name= 2;   
  int32 OrganizationId = 3;
  int32 RefId = 4;
  string Description= 5;
  int32 GroupRefCount=6;
  repeated AccountGroupRef GroupRef = 7;
  bool Exists=8;   
}
message AccountGroupResponce{
  Responcecode code=1;  
  string message = 2; 
  AccountGroupRequest AccountGroup=3;   
}
message AccountGroupDataList
    {
      Responcecode Code=1;
      string Message = 2;
      repeated AccountGroupRequest AccountGroupRequest= 3;      
    }
message AccountGroupFilterRequest{
  int32 Id=1;  
  bool GroupRef = 2;
  bool GroupRefCount = 3;  
  int32 OrganizationId = 4;
  int32 AccountId =5;
}
message AccountGroupDetailsRequest {
  int32 AccountId=1;  
  int32 OrganizationId = 2;
  int32 AccountGroupId=3;
  int32 VehicleGroupId=4;
  int32 RoleId=5;
  string Name = 6;  
}
message AccountGroupDetail {
  int32 GroupId=1;
  string AccountGroupName=2;    
  int32 VehicleCount = 3;
  int32 AccountCount = 4;
  int32 OrganizationId = 5;
}
message AccountGroupDetailsDataList {
  repeated AccountGroupDetail AccountGroupDetail= 1;  
  Responcecode Code=2;
  string Message = 3;
}

message IdRequest {
  int32 Id = 1;
}
// End Account Group

// Begin Account Role

message AccountRole {  
  int32 RoleId = 3;  
}

message AccountRoleDeleteRequest {
  int32 AccountId=1;
  int32 OrganizationId=2;  
}
message NameIdResponse {
  int32 Id=1;
  string Name=2;  
}
message AccountRoles{
  repeated NameIdResponse Roles=1;
  Responcecode Code=2;
  string Message = 3; 
}

message AccountRoleRequest {
  int32 AccountId=1;
  int32 OrganizationId=2;    
  repeated AccountRole AccountRoles=3;  
}

message AccountRoleResponse{
  Responcecode Code=1;
  string Message = 2; 
}

// End Account Role

// Begin Account Relationship 

message AccessRelationshipDeleteRequest
{
  int32 AccountGroupId =1;
  int32 VehicleGroupId =2;        
}

message AccessRelationship
{
  int32 Id=1;
  string AccessRelationType =2;
  int32 AccountGroupId =3;
  int32 VehicleGroupId =4;
  //string StartDate=5;
  //string EndDate=6;        
}
message AccessRelationshipFilter
{
  int32 AccountId =1;
  int32 AccountGroupId =2; 
  int32 VehicleGroupId =3;
}
message AccessRelationshipResponse
{
  Responcecode Code=1;
  string Message = 2;
  AccessRelationship AccessRelationship=3;
}
message AccessRelationshipDataList
{
  Responcecode Code=1;
  string Message = 2;
  repeated AccessRelationship AccessRelationship=3;
}
// End Account Relationship 