parameters:
#- name: subscription
#  type: string
#  default: 'subscription'
- name: containerRegistry
  type: string
  default: 'containerRegistry'
- name: variableGroup
  type: string
  default: 'variableGroup'
- name: dockerFile
  type: string
  default: 'dockerFile'
- name: imageName
  type: string
  default: 'imageName'
- name: manifestFile
  type: string
  default: 'manifestFile'
- name: jsonPath
  type: string
  default: 'jsonPath'
#- name: log4netConfigPath
#  type: string
#  default: 'log4netConfigPath'



jobs:
- job:
  pool: $(PRIVATEAGENT)
  variables:
  - group: ${{ parameters.variableGroup }}
  steps:
  - task: replacetokens@3
    inputs:
      targetFiles: ${{ parameters.jsonPath }}
      encoding: 'auto'
      writeBOM: true
      actionOnMissing: 'warn'
      keepToken: false
      tokenPrefix: '#{'
      tokenSuffix: '}#'
      useLegacyPattern: false
      enableTelemetry: true

  - task: CmdLine@2
    inputs:
        script: |
          cat ${{ parameters.jsonPath }}
      
  - task: Docker@2
    displayName: 'Build an image'
    inputs:
      containerRegistry:  ${{ parameters.ContainerRegistry }}
      repository: ${{parameters.imageName}}
      command: 'build'
      dockerFile: ${{ parameters.dockerFile }}
      arguments: '--no-cache'
      tags: |
        $(Build.BuildNumber)
        latest

  - task: Docker@2
    displayName: 'Push an image'
    inputs:
      containerRegistry:  ${{ parameters.ContainerRegistry }}
      repository: ${{parameters.imageName}}
      command: 'push'
      tags: |
        $(Build.BuildNumber)
        latest
  
  - task: CmdLine@2
    inputs:
      script: |
        echo ${{ parameters.manifestFile }}

  - task: CopyFiles@2
    displayName: 'Copy Kubernetes manifest'
    inputs:
      SourceFolder: '$(system.defaultworkingdirectory)'
      Contents: ${{ parameters.manifestFile }} 
      TargetFolder: '$(build.artifactstagingdirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Drop'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'