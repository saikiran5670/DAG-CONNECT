# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

parameters:
- name: ENV
  displayName: ENV
  type: string
  default: DEV0
  values:
  - DEV0
  - DEV01
  - DEV02
  - TEST01
  - TEST02
  - ACC03
  - ACC01
  - ACC02
  - PRD01

pool: $(PRIVATEAGENT)

variables:
- ${{ if eq(parameters.ENV, 'DEV0') }}:
  - group: DEV0-Build-Variables
- ${{ if eq(parameters.ENV, 'DEV01') }}:
  - group: DEV01-Build-Variables
- ${{ if eq(parameters.ENV, 'DEV02') }}:
  - group: DEV02-Build-Variables
- ${{ if eq(parameters.ENV, 'TEST01') }}:
  - group: TEST01-Build-Variables
- ${{ if eq(parameters.ENV, 'TEST02') }}:
  - group: TEST02-Build-Variables
- ${{ if eq(parameters.ENV, 'ACC03') }}:
  - group: ACC03-Build-Variables
- ${{ if eq(parameters.ENV, 'ACC01') }}:
  - group: ACC01-Build-Variables
- ${{ if eq(parameters.ENV, 'ACC02') }}:
  - group: ACC02-Build-Variables
- ${{ if eq(parameters.ENV, 'PRD01') }}:
  - group: PRD01-Build-Variables
  
steps:
- task: replacetokens@3
  inputs:
    targetFiles: 'dotnet/businessservices/net.atos.daf.ct2.packageservice/appsettings.Production.json'
    encoding: 'auto'
    writeBOM: true
    actionOnMissing: 'warn'
    keepToken: false
    tokenPrefix: '#{'
    tokenSuffix: '}#'
    useLegacyPattern: false
    enableTelemetry: true

- task: CmdLine@2
  inputs:
    script: |
      cat dotnet/businessservices/net.atos.daf.ct2.packageservice/appsettings.Production.json

- task: replacetokens@3
  inputs:
    targetFiles: 'dotnet/businessservices/net.atos.daf.ct2.packageservice/log4net.config'
    encoding: 'auto'
    writeBOM: true
    actionOnMissing: 'warn'
    keepToken: false
    tokenPrefix: '#{'
    tokenSuffix: '}#'
    useLegacyPattern: false
    enableTelemetry: true

- task: CmdLine@2
  inputs:
    script: |
      cat dotnet/businessservices/net.atos.daf.ct2.packageservice/log4net.config

- task: Docker@0
  displayName: 'Build an image'
  inputs:
    azureSubscription:  $(Subscription)
    azureContainerRegistry: $(ContainerRegistry)
    dockerFile: dotnet/PackageService_Dockerfile
    imageName: packageservice-grpc

- task: Docker@0
  displayName: 'Push an image'
  inputs:
    azureSubscription: $(Subscription)
    azureContainerRegistry: $(ContainerRegistry)
    action: 'Push an image'
    imageName: packageservice-grpc

