{
	"name": "VehicleProperties",
	"properties": {
		"activities": [
			{
				"name": "VehicleProperties_CT1",
				"description": "Migrate Organization data",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureMySqlSource",
						"query": "SELECT distinct\nvh.vehicle_creation_date as manufacture_date,\nnull as delivery_date,\nvh.brand as make,\nvh.extra_length as length,\nvh.extra_height as height,\nvh.extra_gross_weight as weight,\nnull as engine_id,\nvh.extra_engine_type as engine_type,\nvh.engine_power,\nvh.extra_coolant as engine_coolant,\nCASE WHEN vh.emission_level  is NULL THEN vh.CO2_NORM END as engine_emission_level,\nvh.extra_chassis_number as chasis_id,\nvh.extra_rear_overhang as chasis_rear_overhang,\ncase when vh.axle_configuration is null then REPLACE(JSON_EXTRACT(co.metadata,'$.wheelPlanType'),'\"','') end  as driveline_axle_configuration,\nvh.extra_wheel_base as driveline_wheel_base,\nvh.extra_tyre_size_front_axle_1 as driveline_tire_size,\nnull as transmission_gearbox_id,\nvh.extra_gearbox_type  as transmission_gearbox_type,\nvh.extra_chassis_number as cabin_id,\nnull as series_id,\nREPLACE(JSON_EXTRACT(co.metadata,'$.sdType'),'\"','') as  series_vehicle_range,\ncase when vh.model_year is null then vh.construction_year end as model_year,\nvh.extra_cab_type as cabin_type,\nvh.extra_roof_spoiler  as cabin_roofspoiler,\n'ECU Type' as electronic_control_unit_type,\n'ECU control unit (SCU)' as electronic_control_unit_name,\n'Gross' as weight_type,\nCASE WHEN vh.extra_side_skirts = 'side skirts' THEN 'Yes' ELSE 'No' END AS chasis_side_skirts,\nCASE WHEN vh.extra_side_collars = 'side collars' THEN 'Yes' ELSE 'No' END AS chasis_side_collar,\nvh.extra_width  as width,\nvh.model_name as type_id,\nvh.vehicle_vid\n\nfrom cle_pc_cvp_fap.vehicle vh\nleft join daf.co_connected_object co\non co.internal_id = vh.vehicle_vid\nleft join daf.co_connected_object_type typ\non typ.id = co.connected_object_type\nleft join daf.co_third_party prty\non typ.third_party_id = prty.id\nleft join cle_pc_cvp_fap.equipment eq\non eq.vehicle_id = vh.id;\n\n",
						"queryTimeout": "02:00:00"
					},
					"sink": {
						"type": "AzurePostgreSQLSink",
						"writeBatchSize": 1000000,
						"writeBatchTimeout": "00:30:00",
						"writeMethod": "BulkInsert"
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "vehicle_vid",
									"type": "String"
								},
								"sink": {
									"name": "vehicle_vid",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"sink": {
									"name": "frontaxletype",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"sink": {
									"name": "rearaxleload",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"sink": {
									"name": "rearaxleratio",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"sink": {
									"name": "tyrerearsize",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"sink": {
									"name": "tyrefrontsize",
									"type": "String",
									"physicalType": "character varying"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "VehicleProperties_CT1",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "VehicleProperties_Source",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Organization_CHG",
				"description": "Compares source and target and find the records for upsert",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "VehicleProperties_CT1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzurePostgreSqlSource",
						"query": "SELECT \n\tcoalesce(L.ID,0) AS ID,\nS.ORG_ID                        ,\nS.TYPE                          ,\nS.NAME                          ,\nS.ADDRESS_TYPE                  ,\nS.STREET                        ,\nsubstring(S.STREET,'[0-9]+')  as STREET_NUMBER                  ,\nS.POSTAL_CODE                   ,\nS.CITY                          ,\nCASE WHEN S.COUNTRY_CODE  IS NOT NULL THEN cnty.code ELSE NULL END AS country_code,\n(select extract(epoch from cast(S.reference_date as timestamp)) * 1000) as REFERENCE_DATE,\nS.PREFERENCE_ID                 ,\nS.VEHICLE_DEFAULT_OPT_IN        ,\nS.DRIVER_DEFAULT_OPT_IN         ,\nS.STATE                         ,\n\tCASE WHEN L.ID IS NULL THEN 'I' ELSE 'X' END AS CHG_FLG,\n\tCURRENT_TIMeSTAMP AS LOAD_DT\n\t\nFROM\n       public.organization S\nLEFT JOIN \n       master.organization L\nON S.ORG_ID = L.ORG_ID\nLEFT join master.country cnty\non s.country_code = cnty.name\nWHERE ( S.TYPE\t<>\tL.TYPE\tOR\nS.NAME\t<>\tL.NAME\tOR\nS.ADDRESS_TYPE\t<>\tL.ADDRESS_TYPE\tOR\nS.STREET\t<>\tL.STREET\tOR\nS.STREET_NUMBER\t<>\tL.STREET_NUMBER\tOR\nS.POSTAL_CODE\t<>\tL.POSTAL_CODE\tOR\nS.CITY\t<>\tL.CITY\tOR\nS.COUNTRY_CODE\t<>\tL.COUNTRY_CODE\tOR\n(select extract(epoch from cast(S.reference_date as timestamp)) * 1000)\t<>\tL.REFERENCE_DATE\tOR\nS.PREFERENCE_ID\t<>\tL.PREFERENCE_ID\tOR\nS.VEHICLE_DEFAULT_OPT_IN\t<>\tL.VEHICLE_DEFAULT_OPT_IN\tOR\nS.DRIVER_DEFAULT_OPT_IN\t<>\tL.DRIVER_DEFAULT_OPT_IN\tOR\nS.STATE\t<>\tL.STATE  OR\n\t    L.ID IS NULL);"
					},
					"sink": {
						"type": "AzurePostgreSQLSink",
						"writeBatchSize": 1000000,
						"writeBatchTimeout": "00:30:00",
						"preCopyScript": "TRUNCATE TABLE STAGING.ORGANIZATION_CHG;",
						"writeMethod": "BulkInsert"
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "id",
									"type": "Int32",
									"physicalType": "integer"
								},
								"sink": {
									"name": "id",
									"type": "Int32",
									"physicalType": "integer"
								}
							},
							{
								"source": {
									"name": "org_id",
									"type": "String",
									"physicalType": "character varying"
								},
								"sink": {
									"name": "org_id",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"source": {
									"name": "type",
									"type": "String",
									"physicalType": "character varying"
								},
								"sink": {
									"name": "type",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"source": {
									"name": "name",
									"type": "String",
									"physicalType": "character varying"
								},
								"sink": {
									"name": "name",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"source": {
									"name": "address_type",
									"type": "String",
									"physicalType": "character varying"
								},
								"sink": {
									"name": "address_type",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"source": {
									"name": "street",
									"type": "String",
									"physicalType": "character varying"
								},
								"sink": {
									"name": "street",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"source": {
									"name": "street_number",
									"type": "String",
									"physicalType": "text"
								},
								"sink": {
									"name": "street_number",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"source": {
									"name": "postal_code",
									"type": "String",
									"physicalType": "character varying"
								},
								"sink": {
									"name": "postal_code",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"source": {
									"name": "city",
									"type": "String",
									"physicalType": "character varying"
								},
								"sink": {
									"name": "city",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"source": {
									"name": "country_code",
									"type": "String",
									"physicalType": "character varying"
								},
								"sink": {
									"name": "country_code",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"source": {
									"name": "reference_date",
									"type": "Double",
									"physicalType": "double precision"
								},
								"sink": {
									"name": "reference_date",
									"type": "Int64",
									"physicalType": "bigint"
								}
							},
							{
								"source": {
									"name": "preference_id",
									"type": "Int32",
									"physicalType": "integer"
								},
								"sink": {
									"name": "preference_id",
									"type": "Int32",
									"physicalType": "integer"
								}
							},
							{
								"source": {
									"name": "vehicle_default_opt_in",
									"type": "String",
									"physicalType": "character"
								},
								"sink": {
									"name": "vehicle_default_opt_in",
									"type": "String",
									"physicalType": "character"
								}
							},
							{
								"source": {
									"name": "driver_default_opt_in",
									"type": "String",
									"physicalType": "character"
								},
								"sink": {
									"name": "driver_default_opt_in",
									"type": "String",
									"physicalType": "character"
								}
							},
							{
								"source": {
									"name": "state",
									"type": "String",
									"physicalType": "character"
								},
								"sink": {
									"name": "state",
									"type": "String",
									"physicalType": "character"
								}
							},
							{
								"source": {
									"name": "chg_flg",
									"type": "String",
									"physicalType": "text"
								},
								"sink": {
									"name": "chg_flg",
									"type": "String",
									"physicalType": "character"
								}
							},
							{
								"source": {
									"name": "load_dt",
									"type": "DateTime",
									"physicalType": "timestamp with time zone"
								},
								"sink": {
									"name": "load_dt",
									"type": "DateTime",
									"physicalType": "timestamp without time zone"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "Organization_source",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "Organization_CHG",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Update_Organization_X",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Organization_CHG",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzurePostgreSqlSource",
						"query": "UPDATE MASTER.ORGANIZATION L \nSET\t \nTYPE\t=\tE.TYPE\t,\nNAME\t=\tE.NAME\t,\nADDRESS_TYPE\t=\tE.ADDRESS_TYPE\t,\nSTREET\t=\tE.STREET\t,\nSTREET_NUMBER\t=\tE.STREET_NUMBER\t,\nPOSTAL_CODE\t=\tE.POSTAL_CODE\t,\nCITY\t=\tE.CITY\t,\nCOUNTRY_CODE\t=\tE.COUNTRY_CODE\t,\nREFERENCE_DATE\t=\tE.REFERENCE_DATE\t,\nPREFERENCE_ID\t=\tE.PREFERENCE_ID\t,\nVEHICLE_DEFAULT_OPT_IN\t=\tE.VEHICLE_DEFAULT_OPT_IN\t,\nDRIVER_DEFAULT_OPT_IN\t=\tE.DRIVER_DEFAULT_OPT_IN\t,\nSTATE\t=\tE.STATE\nFROM    staging.organization_chg E\nWHERE L.org_id = E.org_id \n  AND  E.CHG_FLG     = 'X';\n  \nSELECT * FROM STAGING.ORGANIZATION_CHG WHERE CHG_FLG = 'X';"
					},
					"dataset": {
						"referenceName": "Organization",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Organization",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Update_Organization_X",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzurePostgreSqlSource",
						"query": "SELECT \n\tE.ORG_ID                        ,\n\tE.NAME                          ,\n\tE.ADDRESS_TYPE                  ,\n\tCASE WHEN E.STREET  IS NOT NULL THEN E.STREET ELSE '' END AS STREET  ,\n\tCASE WHEN E.STREET_NUMBER  IS NOT NULL THEN E.STREET_NUMBER ELSE '' END AS STREET_NUMBER ,\n\tCASE WHEN E.POSTAL_CODE  IS NOT NULL THEN E.POSTAL_CODE ELSE '' END AS POSTAL_CODE                 ,\n\tCASE WHEN E.CITY IS NOT NULL THEN E.CITY ELSE '' END AS CITY                         ,\n\tCASE WHEN E.COUNTRY_CODE IS NOT NULL THEN E.COUNTRY_CODE ELSE '' END AS COUNTRY_CODE                 ,\n\tE.REFERENCE_DATE                ,\n\tE.VEHICLE_DEFAULT_OPT_IN        ,\n\tE.DRIVER_DEFAULT_OPT_IN         ,\n\tE.STATE                \n\t\nFROM staging.Organization_CHG E\nWHERE  E.CHG_FLG = 'I' \nAND NOT EXISTS (SELECT 1 FROM MASTER.ORGANIZATION L\n             WHERE    L.ORG_ID = E.ORG_ID)\nORDER BY \n    \tORG_ID;\n"
					},
					"sink": {
						"type": "AzurePostgreSQLSink",
						"writeBatchSize": 1000000,
						"writeBatchTimeout": "00:30:00",
						"writeMethod": "BulkInsert"
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "org_id",
									"type": "String",
									"physicalType": "character varying"
								},
								"sink": {
									"name": "org_id",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"source": {
									"name": "name",
									"type": "String",
									"physicalType": "character varying"
								},
								"sink": {
									"name": "name",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"source": {
									"name": "address_type",
									"type": "String",
									"physicalType": "character varying"
								},
								"sink": {
									"name": "address_type",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"source": {
									"name": "street",
									"type": "String",
									"physicalType": "character varying"
								},
								"sink": {
									"name": "street",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"source": {
									"name": "street_number",
									"type": "String",
									"physicalType": "character varying"
								},
								"sink": {
									"name": "street_number",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"source": {
									"name": "postal_code",
									"type": "String",
									"physicalType": "character varying"
								},
								"sink": {
									"name": "postal_code",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"source": {
									"name": "city",
									"type": "String",
									"physicalType": "character varying"
								},
								"sink": {
									"name": "city",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"source": {
									"name": "country_code",
									"type": "String",
									"physicalType": "character varying"
								},
								"sink": {
									"name": "country_code",
									"type": "String",
									"physicalType": "character varying"
								}
							},
							{
								"source": {
									"name": "reference_date",
									"type": "Int64",
									"physicalType": "bigint"
								},
								"sink": {
									"name": "reference_date",
									"type": "Int64",
									"physicalType": "bigint"
								}
							},
							{
								"source": {
									"name": "vehicle_default_opt_in",
									"type": "String",
									"physicalType": "character"
								},
								"sink": {
									"name": "vehicle_default_opt_in",
									"type": "String",
									"physicalType": "character"
								}
							},
							{
								"source": {
									"name": "driver_default_opt_in",
									"type": "String",
									"physicalType": "character"
								},
								"sink": {
									"name": "driver_default_opt_in",
									"type": "String",
									"physicalType": "character"
								}
							},
							{
								"source": {
									"name": "state",
									"type": "String",
									"physicalType": "character"
								},
								"sink": {
									"name": "state",
									"type": "String",
									"physicalType": "character"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "Organization_CHG",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "Organization",
						"type": "DatasetReference"
					}
				]
			}
		],
		"annotations": [],
		"lastPublishTime": "2021-08-18T13:28:56Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}